In this project, I will demonstrate an OSPF injection and LSA tampering attack on a controlled, multi-area OSPF lab topology designed in GNS3. The project consists of three distinct OSPF areas (Area 1, Area 0, and Area 2), interconnected by Area Border Routers (ABRs), with each area populated by multiple routers and multilayer switches. My attack will be launched from a Kali Linux VM placed inside Area 1, connected to one of the access switches (e.g., Switch1). From there, the attacker machine will have Layer 2 adjacency with one or more OSPF routers, allowing it to send OSPF packets.

The first phase of the attack will involve a basic OSPF Hello packet injection. I will use a custom Python 3 script written with Scapy to craft and send a spoofed OSPF Hello packet from the Kali VM. This packet will pretend to originate from a non-existent router with a forged router ID (e.g., 9.9.9.9). The goal is to trick nearby routers into believing a new OSPF neighbor exists. While this may not immediately affect routing, it will waste router resources and could disrupt neighbor relationships or trigger unnecessary SPF recalculations.

In the second and more advanced phase, I will perform OSPF LSA tampering. This involves injecting a forged Link State Update (LSU) containing fake Router-LSAs or Network-LSAs. The injected LSAs will advertise bogus routes (e.g., a fake network 192.168.250.0/24 supposedly reachable via the attacker). If successful, this will cause routers within Area 1—and potentially even Area 0—to install incorrect routes in their routing tables. This could redirect traffic into a black hole, loop, or attacker-controlled path, simulating a man-in-the-middle or denial-of-service condition.

I will monitor the effect of these injections using Wireshark (on the Kali VM) and routing table inspection on the routers (e.g., using show ip route ospf and show ip ospf database). Screenshots of router neighbor tables, routing changes, and packet captures will be included in the final documentation. The entire lab is isolated, making it a safe and ethical testbed for learning about OSPF protocol weaknesses and demonstrating the importance of implementing OSPF authentication (MD5 or SHA) and routing filters to defend against such attacks.
